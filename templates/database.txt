ainda não entendi todos os códigos relativos ao SQL_alchemy portanto apenas aceitei que os códigos seguintes nos fornecem um banco de dados
#modelos de usuário:
from flask_login import UserMixin
from __init__ import db

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True) # primary keys are required by SQLAlchemy
    email = db.Column(db.String(100), unique=True)
    password = db.Column(db.String(100))
    name = db.Column(db.String(1000))
#linha que propriamente gera o database
if __name__ == '__main__':
    db.create_all(app=create_app()) # create the SQLite database
    app.run(debug=True) # run the flask app on debug mode
#função de signup (registro)
@auth.route('/signup', methods=['GET', 'POST'])# we define the sign 
                                               # up path
def signup(): # define the sign up function
    if request.method=='GET': # If the request is GET we return the 
                              # sign up page and forms
        return render_template('signup.html')
    else: # if the request is POST, then we check if the email 
          # doesn't already exist and then we save data
        email = request.form.get('email')
        name = request.form.get('name')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first() # if this 
                              # returns a user, then the email 
                              # already exists in database
        if user: # if a user is found, we want to redirect back to 
                 # signup page so user can try again
            flash('Email address already exists')
            return redirect(url_for('auth.signup'))
        # create a new user with the form data. Hash the password so 
        # the plaintext version isn't saved.
        new_user = User(email=email, name=name, \
                        password=generate_password_hash(password, \
                        method='sha256'))#add the new user to the db
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('auth.login'))
